{
  "workbench.iconTheme": "material-icon-theme",
  "material-icon-theme.folders.theme": "specific",
  "vsicons.dontShowNewVersionMessage": true,
  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━❰ editor setting ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/
  // show tab
  "workbench.editor.showTabs": true,
  "bookmarks.navigateThroughAllFiles": true,
  "bookmarks.saveBookmarksInProject": true,
  "bookmarks.sideBar.expanded": true,
  "bookmarks.useWorkaroundForFormatters": true,
  "workbench.tree.renderIndentGuides": "always",
  "search.searchOnType": true,
  "search.showLineNumbers": true,
  "search.smartCase": true,
  // 显示空格标记（..)
  "editor.renderWhitespace": "selection",
  "editor.wordWrap": "off",
  // like cmp ghost text(My favorite feature)
  "editor.suggest.preview": true,
  "workbench.editor.limit.enabled": false,
  "workbench.editor.limit.value": 5,
  "editor.smoothScrolling": true,
  "workbench.list.smoothScrolling": true,
  "explorer.confirmDragAndDrop": false,
  // vscode补全设置，开启vscode字符补全，像cmp的buffer补全
  "editor.quickSuggestions": {
    "other": "on",
    "comments": "off",
    "strings": "on"
  },
  "editor.showFoldingControls": "always",
  "editor.bracketPairColorization.enabled": true,
  "editor.suggestSelection": "first",
  "editor.fontSize": 15,
  "debug.console.fontSize": 18,
  "editor.cursorSurroundingLines": 8,
  "editor.bracketPairColorization.independentColorPoolPerBracketType": true,
  "editor.linkedEditing": true,
  // "editor.fontFamily": "JetBrains Mono,Cascadia Code,FiraCode Nerd Font,Menlo, Monaco, 'Courier New', monospace,'Hack Nerd Font'",
  // "editor.fontFamily": "JetBrains Mono,微软雅黑",
  "editor.fontFamily": "FiraCode Nerd Font,微软雅黑",
  "editor.tabSize": 2, // minimap
  "editor.cursorSmoothCaretAnimation": true,
  "editor.formatOnSave": true,
  "editor.unicodeHighlight.nonBasicASCII": false,
  "editor.inlineSuggest.enabled": true,
  "zenMode.centerLayout": false,
  "zenMode.fullScreen": false,
  "zenMode.hideLineNumbers": false,
  "emmet.triggerExpansionOnTab": true,
  "errorLens.enabledDiagnosticLevels": ["warning", "info", "hint", "error"],
  // UI Customizations
  "editor.fontLigatures": true, // 这个控制是否启用字体连字
  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        "name": "italic font",
        "scope": [
          "comment"
          // "keyword.control.import",
          // "keyword.control.default",
          // "keyword.control.export",
          // "keyword.control.flow"
          // "keyword.control.from",
          // "keywor.operator.new"
          // "entity.name.tag.css"
          // "entity.other.attribute-name",
          // "storage",
          // "storage.type.class",
          // "storage.type.function",
          // "storage.type",
          // "storage.type.class",
          // "variable.language",
          // "variable.language.super",
          // "variable.language.this",
          // "meta.class",
          // "meta.var.expr",
          // "constant.language.null",
          // "support.type.primitive",
          // "entity.name.method.js",
          // "entity.other.attribute-name",
          // "punctuation.definition.comment",
          // "text.html.basic entity.other.attribute-name.html",
          // "text.html.basic entity.other.attribute-name",
          // "tag.decorator.js entity.name.tag.js",
          // "tag.decorator.js punctuation.definition.tag.js",
          // "source.js constant.other.object.key.js string.unquoted.label.js"
        ],
        "settings": {
          "fontStyle": "italic"
        }
      },
      {
        "name": "bold font",
        "scope": [
          // "keyword",
          "markup.heading.markdown",
          "markup.bold.markdown"
        ],
        "settings": {
          "fontStyle": "bold"
        }
      },
      {
        "name": "normal font",
        "scope": [
          "support.type.property-name.json.comments",
          "entity.name.tag.html",
          "variable.parameter"
        ],
        "settings": {
          "fontStyle": ""
        }
      }
    ]
  },
  "monokaiPro.fileIconsMonochrome": false,
  "workbench.colorCustomizations": {
    // "tab.hoverBackground": "#027bcc",
    "[Monokai Pro]": {
      "panel.background": "#1e1e1e",
      "terminal.background": "#1e1e1e" // #221f22
    },
    "[GitHub Dark Default]": {
      "tab.activeBorder": "#43B9D8"
    },
    "[monokai-charcoal]": {
      "tab.activeBackground": "#0000",
      "tab.activeForeground": "#43B9D8",
      "tab.border": "#181a1f",
      "tab.activeBorder": "#43B9D8",
      "tab.unfocusedActiveBorder": "#919288",
      "tab.inactiveBackground": "#0000",
      "tab.inactiveForeground": "#ffffff",
      "tab.unfocusedActiveForeground": "#c0c1b5",
      "tab.unfocusedInactiveForeground": "#919288",
      "tab.hoverBackground": "#323842",
      "tab.unfocusedHoverBackground": "#323842",
      "tab.hoverBorder": "#57584f",
      "tab.unfocusedHoverBorder": "#272822",
      "tab.activeModifiedBorder": "#57584f",
      "tab.inactiveModifiedBorder": "#57584f",
      "tab.unfocusedActiveModifiedBorder": "#3b3c35",
      "tab.unfocusedInactiveModifiedBorder": "#3b3c35",
      "tab.lastPinnedBorder": "#57584f"
      // "editorCursor.foreground": "#ffcc00"
      // vim搜索文本高亮
      // "editor.findMatchHighlightBackground": "#3069db",
      // "editor.findMatchBackground": "#4d656b",
      // "editor.findMatchBorder": "#000000"
    },
    "[Default Dark+]": {
      "tab.border": "#181a1f",
      "tab.activeBorder": "#1d7bed"
    }
  },
  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━❰ end editor ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/

  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━❰ vim config ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/
  "vim.showmodename": true,
  "vim.incsearch": true,
  "vim.useCtrlKeys": true,
  "vim.handleKeys": {
    // vim use ctrl+a increase number
    "<C-a>": true,
    // vim use ctrl+x decrease number
    "<C-x>": true,
    // use ctrl+p(vscode) to find file
    "<C-p>": false,
    // use ctrl+f(vscode) to find character or string
    "<C-f>": false,
    // use ctrl+r(vscode) to find recent file
    "<C-r>": true,
    // use ctrl+b(vscode) toggle sidebar
    "<C-b>": false,
    // use ctrl+e(vscode) toggle filetree
    "<C-e>": false,
    // use ctrl+g(vscode) line to jump
    "<C-g>": false,
    // null
    "<C-m>": false,
    // windows (ctrl+z)
    "<C-z>": false
  },
  "vim.hlsearch": true,
  "vim.camelCaseMotion.enable": true,
  "vim.showcmd": true,
  // "vim.shell": "C:\\Windows\\system32cmd.exe",
  "vim.timeout": 500,
  "vim.leader": "\\",
  "editor.lineNumbers": "relative",
  "vim.smartRelativeLine": false,
  "vim.autoSwitchInputMethod.enable": true,
  "vim.autoSwitchInputMethod.defaultIM": "1033", // 1033
  "vim.autoSwitchInputMethod.obtainIMCmd": "D:\\im\\im-select.exe",
  "vim.autoSwitchInputMethod.switchIMCmd": "D:\\im\\im-select.exe {im}",
  "vim.history": 1000,
  "vim.showMarksInGutter": true,
  "vim.highlightedyank.enable": true,
  "vim.highlightedyank.color": "rgba(250, 240, 170, 0.5)",
  "vim.highlightedyank.duration": 300,
  "vim.useSystemClipboard": false,
  "vim.wrapscan": true,
  "vim.easymotion": true,
  "vim.visualstar": true,
  "vim.changeWordIncludesWhitespace": false,
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": ["<Space>"],
      "commands": ["whichkey.show"]
    },
    {
      "before": ["u"],
      "commands": ["undo"]
    },
    // {
    //   "before": ["ctrl+r"],
    //   "commands": ["redo"]
    // },
    {
      "before": ["ctrl+n"],
      "after": ["g", "b"]
    },
    {
      "before": ["ctrl+j"],
      "commands": ["editor.action.joinLines"],
      "when": [" editorTextFocus && !editorReadonly "]
    },
    {
      "before": ["L"],
      "after": ["$"]
    },
    {
      "before": ["H"],
      "after": ["^"]
    },
    {
      "before": ["<"],
      "commands": ["editor.action.outdentLines"]
    },
    {
      "before": [">"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["j"],
      "after": ["g", "j"],
      "when": " editorLangId == 'markdown'"
    },
    {
      "before": ["k"],
      "after": ["g", "k"],
      "when": " editorLangId == 'markdown'"
    },
    {
      "before": ["Y"],
      "after": ["y", "$"]
    },
    {
      "before": ["J"],
      "commands": ["editor.action.moveLinesDownAction"]
    },
    {
      "before": ["K"],
      "commands": ["editor.action.moveLinesUpAction"]
    },
    {
      "before": ["alt+n"],
      "after": ["g", "b"]
    },
    {
      "before": ["ctrl+n"],
      "after": ["g", "b"]
    }
  ],
  // vim normalKeybinding
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": ["<Space>"],
      "commands": ["whichkey.show"]
    },
    {
      "before": ["m", "a"],
      "commands": ["bookmarks.listFromAllFiles"],
      "when": "editorTextFocus"
    },
    {
      "before": ["m", "t"],
      "commands": ["bookmarks.toggle"],
      "when": "editorTextFocus"
    },
    {
      "before": ["m", "m"],
      "commands": ["bookmarks.toggle"],
      "when": "editorTextFocus"
    },
    {
      "before": ["m", "c"],
      "commands": ["bookmarks.clear"],
      "when": "editorTextFocus"
    },
    {
      "before": ["g", "a"],
      "commands": ["editor.action.quickFix"],
      "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
      "before": ["g", "I"],
      "commands": ["editor.action.goToImplementation"],
      "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
      "before": ["g", "l"],
      "commands": ["editor.action.marker.nextInFiles"],
      "when": ["editorFocus"]
    },
    {
      "before": ["g", "p"],
      "commands": ["editor.action.peekDefinition"],
      "when": [
        "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
      ]
    },
    {
      "before": ["g", "r"],
      "commands": ["editor.action.referenceSearch.trigger"],
      "when": [
        "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
      ]
    },
    {
      "before": ["g", "s"],
      "commands": ["workbench.action.gotoSymbol"],
      "when": [
        "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
      ]
    },
    {
      "before": ["[", "d"],
      "commands": ["editor.action.marker.prevInFiles"],
      "when": "editorFocus"
    },
    {
      "before": ["]", "d"],
      "commands": ["editor.action.marker.nextInFiles"],
      "when": "editorFocus"
    },
    {
      "before": ["[", "g"],
      "commands": ["workbench.action.editor.previousChange"]
    },
    {
      "before": ["]", "g"],
      "commands": ["workbench.action.editor.nextChange"]
    },
    {
      "before": ["j"],
      "after": ["g", "j"],
      "when": " editorLangId == 'markdown'"
    },
    {
      "before": ["k"],
      "after": ["g", "k"],
      "when": " editorLangId == 'markdown'"
    },
    {
      "before": ["K"],
      "commands": ["editor.action.showHover"]
    },
    {
      "before": ["c", "i", "l"],
      "after": ["^", "C"]
    },
    {
      "before": ["d", "i", "l"],
      "after": ["^", "D"]
    },
    {
      "before": ["x"],
      "commands": ["workbench.action.closeActiveEditor"]
    },
    {
      "before": ["X"],
      "commands": ["workbench.action.reopenClosedEditor"]
    },
    {
      "before": ["<TAB>"],
      "commands": [":bnext"]
    },
    {
      "before": ["<S-TAB>"],
      "commands": [":bprevious"]
    },
    {
      "before": [">"],
      "after": [">", ">"]
    },
    {
      "before": ["<"],
      "after": ["<", "<"]
    },
    {
      "before": ["ctrl+n"],
      "after": ["g", "b"]
    },
    // remove vim default s/S keybinding
    {
      "before": ["s"],
      "after": [""]
    },
    {
      "before": ["S"],
      "after": [""]
    },
    // easymotion setting
    {
      "before": ["s", "s"],
      "after": ["<leader>", "<leader>", "2", "s"]
    },
    {
      "before": ["Y"],
      "after": ["y", "$"]
    },
    {
      "before": ["s", "w"],
      "after": ["<leader>", "<leader>", "<leader>", "b", "d", "w"]
    },
    {
      "before": ["E"],
      "after": ["leader", "leader", "s"]
    },
    {
      "before": ["s", "l"],
      "after": ["leader", "leader", "leader", "b", "d", "j", "k"]
    },
    // end easymotion setting

    // CamelCaseMotion setting
    {
      "before": ["[", "w"],
      "after": ["leader", "w"]
    },
    {
      "before": ["]", "w"],
      "after": ["leader", "e"]
    },
    {
      "before": ["[", "e"],
      "after": ["leader", "b"]
    },
    {
      "before": ["L"],
      "after": ["$"]
    },
    {
      "before": ["H"],
      "after": ["^"]
    },
    {
      "before": ["s", "v"],
      "commands": [":vsplit"]
    },
    {
      "before": ["s", "g"],
      "commands": [":split"]
    },
    {
      "before": ["s", "c"],
      "commands": ["workbench.action.closeEditorsInGroup"]
    },
    // {
    //   "before": ["ctrl+r"],
    //   "commands": ["redo"]
    // },
    {
      "before": ["ctrl+k"],
      "commands": ["workbench.action.navigateUp"]
    },
    {
      "before": ["ctrl+j"],
      "commands": ["workbench.action.navigateDown"]
    },
    {
      "before": ["ctrl+h"],
      "commands": ["workbench.action.navigateLeft"]
    },
    {
      "before": ["ctrl+l"],
      "commands": ["workbench.action.navigateRight"]
    }
  ],
  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━❰ end vim ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/
  // 添加忽略文件
  "files.exclude": {
    "**/.classpath": true,
    "**/.project": true,
    "**/.settings": true,
    // 添加希望被忽略的文件,这样一些文件虽然存在于当前工作目录下,但是不会被显示在左侧的文件浏览器里
    // dSYM文件具有调试信息,普通使用的话不看到它就可以了
    "**/*.dSYM": true,
    "**/*.out": true,
    "**/.factorypath": true
  },
  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━❰ runner config ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/
  "code-runner.executorMap": {
    "go": "go run",
    "javascript": "node",
    "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
    "objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "python": "python3",
    "php": "php",
    "bat": "cmd /c",
    "shellscript": "bash",
    "typescript": "ts-node",
    "scala": "scala",
    "rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
    "scheme": "csi -script",
    "ahk": "autohotkey",
    "cpp": "g++ $fullFileName -o $dir\"$fileNameWithoutExt\"\".out\" -W -Wall -O2 -std=c++17 && $dir\"$fileNameWithoutExt\"\".out\"",
    "c": "gcc $fullFileName -o $dir\"$fileNameWithoutExt\"\".out\" -W -Wall -O2 -std=c17 && $dir\"$fileNameWithoutExt\"\".out\""
  },
  // custom run command to use lazygit
  // "code-runner.customCommand": "lazygit",
  "code-runner.fileDirectoryAsCwd": false, //true设置为 true后，终端默认目录为运行文件的目录。
  "code-runner.saveFileBeforeRun": true, // run code前保存
  "code-runner.runInTerminal": false, // 设置成false会在"OUTPUT"中只读输出，无法输入数据
  "code-runner.preserveFocus": true, // 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false
  "code-runner.clearPreviousOutput": true, // 每次run code前清空属于code runner的终端消息，默认false
  "code-runner.ignoreSelection": false,
  "code-runner.showExecutionMessage": true,
  "code-runner.showRunIconInEditorTitleMenu": true,
  "code-runner.showRunCommandInEditorContextMenu": false,
  "code-runner.showRunCommandInExplorerContextMenu": false,
  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━❰ end runner ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/

  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━❰ git config ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/
  // 同步我的vscode配置
  "sync.gist": "f25cf7986ba54b02527ad8ff2ddc413b",
  // 指定应抑制哪些消息
  "gitlens.advanced.messages": {
    "suppressGitMissingWarning": true
  },
  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
    --━━━━━━━━━━━━━━━━━━━❰ end git ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/

  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━❰ markdown config ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/
  "markdownlint.focusMode": false,
  "markdown.preview.fontSize": 16,
  "markdown-preview-enhanced.previewTheme": "one-dark.css",
  "markdown-preview-enhanced.enableHTML5Embed": true,
  "markdown-preview-enhanced.enableExtendedTableSyntax": true,
  "markdown-preview-enhanced.automaticallyShowPreviewOfMarkdownBeingEdited": false,
  "markdown.extension.print.absoluteImgPath": false,
  "pasteImage.path": "${projectRoot}/img",
  "pasteImage.basePath": "${currentFileDir}",
  "pasteImage.forceUnixStyleSeparator": false,
  "pasteImage.prefix": "",
  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
    --━━━━━━━━━━━━━━━━━━━❰ end markdown ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/

  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━❰ terminal config ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/
  // windows
  // "terminal.external.windowsExec": "C:\\Program Files\\PowerShell\\7\\pwsh.exe",
  // use default poweshell
  "terminal.external.windowsExec": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
  "terminal.integrated.gpuAcceleration": "on",
  "terminal.integrated.fontFamily": "FiraCode Nerd Font",
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.defaultProfile.windows": "Command Prompt",
  // "terminal.integrated.defaultProfile.windows": "PowerShell",
  "terminal.integrated.profiles.windows": {
    "PowerShell": {
      "path": [
        "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
      ],
      // "source": "PowerShell",
      "overrideName": true,
      "icon": "terminal-powershell",
      "args": ["-NoLogo"]
    },
    "Command Prompt": {
      "path": [
        "${env:windir}\\Sysnative\\cmd.exe",
        "${env:windir}\\System32\\cmd.exe"
      ],
      "args": [],
      "icon": "terminal-cmd"
    },
    "Git Bash": {
      "source": "Git Bash"
    }
  },
  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
    --━━━━━━━━━━━━━━━━━━━❰ end terminal ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/
  "liveServer.settings.donotShowInfoMsg": true,
  "explorer.confirmDelete": false,
  "security.workspace.trust.untrustedFiles": "open",
  "whichkey.sortOrder": "alphabetically",
  "whichkey.bindings": [
    /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
    --━━━━━━━━━━━━━━━━━━━❰ whichkeyconfig ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/
    {
      "key": ";",
      "name": "commands",
      "type": "command",
      "command": "workbench.action.showCommands"
    },
    {
      "key": "1",
      "name": "Focus 1st buffer",
      "type": "command",
      "command": "workbench.action.firstEditorInGroup"
    },
    {
      "key": "2",
      "name": "Focus 2st buffer",
      "type": "command",
      "command": "vim.remap",
      "args": {
        "after": ["2", "g", "t"]
      }
    },
    {
      "key": "3",
      "name": "Focus 3st buffer",
      "type": "command",
      "command": "vim.remap",
      "args": {
        "after": ["3", "g", "t"]
      }
    },
    {
      "key": "4",
      "name": "Focus 4st buffer",
      "type": "command",
      "command": "vim.remap",
      "args": {
        "after": ["4", "g", "t"]
      }
    },
    {
      "key": "5",
      "name": "Focus 5st buffer",
      "type": "command",
      "command": "vim.remap",
      "args": {
        "after": ["5", "g", "t"]
      }
    },
    // {
    //   "key": "?",
    //   "name": "View All References",
    //   "type": "command",
    //   "command": "references-view.find",
    //   "when": "editorHasReferenceProvider"
    // },
    {
      "key": "?",
      "name": "Search keybindings",
      "type": "command",
      "command": "whichkey.searchBindings"
    },
    {
      "key": "/",
      "name": "Search text in project",
      "type": "command",
      "command": "search.action.openEditor"
    },
    // {
    //   "key": "*",
    //   "name": "Search in project with selection",
    //   "type": "command",
    //   "command": "workbench.action.findInFiles search.action.focusSearchList"
    // },
    // whichkey-p
    {
      "key": "P",
      "name": "Project",
      "type": "command",
      "bindings": [
        {
          "key": "l",
          "name": "List all project",
          "type": "command",
          "command": "projectManager.listProjects"
        },
        {
          "key": "s",
          "name": "Save project",
          "type": "command",
          "command": "projectManager.saveProject"
        }
      ]
    },
    //whichkey-b
    {
      "key": "b",
      "name": "Buffers/Editors...",
      "type": "bindings",
      "bindings": [
        {
          "key": "b",
          "name": "Show all buffers/editors",
          "type": "command",
          "command": "workbench.action.showAllEditors"
        },
        {
          "key": "t",
          "name": "Pin buffer",
          "type": "command",
          "command": "workbench.action.pinEditor"
        },
        {
          "key": "T",
          "name": "UnPin buffer",
          "type": "command",
          "command": "workbench.action.unpinEditor"
        },
        {
          "key": "d",
          "name": "Close active editor",
          "type": "command",
          "command": "workbench.action.closeActiveEditor"
        },
        {
          "key": "h",
          "name": "Move editor into left group",
          "type": "command",
          "command": "workbench.action.moveEditorToLeftGroup"
        },
        {
          "key": "j",
          "name": "Move editor into below group",
          "type": "command",
          "command": "workbench.action.moveEditorToBelowGroup"
        },
        {
          "key": "f",
          "name": "Find buffers",
          "type": "command",
          "command": "workbench.action.showAllEditors"
        },
        {
          "key": "k",
          "name": "Move editor into above group",
          "type": "command",
          "command": "workbench.action.moveEditorToAboveGroup"
        },
        {
          "key": "l",
          "name": "Move editor into right group",
          "type": "command",
          "command": "workbench.action.moveEditorToRightGroup"
        },
        {
          "key": "o",
          "name": "Close other editors",
          "type": "command",
          "command": "workbench.action.closeOtherEditors"
        },
        {
          "key": "n",
          "name": "Next editor",
          "type": "command",
          "command": "workbench.action.nextEditor"
        },
        {
          "key": "p",
          "name": "Previous editor",
          "type": "command",
          "command": "workbench.action.previousEditor"
        },
        {
          "key": "N",
          "name": "New untitled editor",
          "type": "command",
          "command": "workbench.action.files.newUntitledFile"
        },
        {
          "key": "u",
          "name": "Reopen closed editor",
          "type": "command",
          "command": "workbench.action.reopenClosedEditor"
        },
        {
          "key": "y",
          "name": "Copy buffer to clipboard",
          "type": "commands",
          "commands": [
            "editor.action.selectAll",
            "editor.action.clipboardCopyAction",
            "cancelSelection"
          ]
        }
      ]
    },
    // whichkey-d
    {
      "key": "d",
      "name": "Debug...",
      "type": "bindings",
      "bindings": [
        {
          "key": "d",
          "name": "Start debug",
          "type": "command",
          "command": "workbench.action.debug.start"
        },
        {
          "key": "S",
          "name": "Stop debug",
          "type": "command",
          "command": "workbench.action.debug.stop"
        },
        {
          "key": "c",
          "name": "Continue debug",
          "type": "command",
          "command": "workbench.action.debug.continue"
        },
        {
          "key": "p",
          "name": "Pause debug",
          "type": "command",
          "command": "workbench.action.debug.pause"
        },
        {
          "key": "r",
          "name": "Run without debugging",
          "type": "command",
          "command": "workbench.action.debug.run"
        },
        {
          "key": "R",
          "name": "Restart ebug",
          "type": "command",
          "command": "workbench.action.debug.restart"
        },
        {
          "key": "i",
          "name": "Step into",
          "type": "command",
          "command": "workbench.action.debug.stepInto"
        },
        {
          "key": "s",
          "name": "Step over",
          "type": "command",
          "command": "workbench.action.debug.stepOver"
        },
        {
          "key": "o",
          "name": "Step out",
          "type": "command",
          "command": "workbench.action.debug.stepOut"
        },
        {
          "key": "t",
          "name": "Toggle breakpoint",
          "type": "command",
          "command": "editor.debug.action.toggleBreakpoint"
        },
        {
          "key": "B",
          "name": "Toggle inline breakpoint",
          "type": "command",
          "command": "editor.debug.action.toggleInlineBreakpoint"
        },
        {
          "key": "j",
          "name": "Jump to cursor",
          "type": "command",
          "command": "debug.jumpToCursor"
        },
        {
          "key": "v",
          "name": "REPL",
          "type": "command",
          "command": "workbench.debug.action.toggleRepl"
        },
        {
          "key": "w",
          "name": "Focus on watch window",
          "type": "command",
          "command": "workbench.debug.action.focusWatchView"
        },
        {
          "key": "W",
          "name": "Add to watch",
          "type": "command",
          "command": "editor.debug.action.selectionToWatch"
        }
      ]
    },
    // whichkey-e
    {
      "key": "e",
      "name": "Toggle Explorer",
      "type": "command",
      "command": "workbench.action.toggleSidebarVisibility"
    },
    // whichkey-h
    {
      "key": "h",
      "name": "No Highlight",
      "type": "command",
      "command": "vim.remap",
      "args": {
        "commands": [
          {
            "command": ":noh"
          }
        ]
      }
    },
    // whichkey-H
    {
      "key": "H",
      "name": "Hightlight Info",
      "type": "command",
      "command": "editor.action.inspectTMScopes"
    },
    // whichkey-R
    {
      "key": "R",
      "name": "Rust run",
      "type": "command",
      "command": "rust-analyzer.run"
    },
    //whichkey-r
    {
      "key": "r",
      "name": "Run/Rename",
      "type": "bindings",
      "bindings": [
        {
          "key": "r",
          "name": "Run code(code-runner)",
          "type": "command",
          "command": "code-runner.run"
        },
        {
          "key": "p",
          "name": "Run previous command",
          "type": "command",
          "command": "workbench.action.terminal.runRecentCommand"
        },
        {
          "key": "n",
          "name": "Rename",
          "type": "command",
          "command": "fileutils.renameFile"
        }
      ]
    },
    // whichkey-c(comment)
    {
      "key": "c",
      "name": "Comment",
      "type": "bindings",
      "bindings": [
        {
          "key": "f",
          "name": "Function Comment ",
          "type": "command",
          "command": "extension.cursorTip"
        },
        {
          "key": "i",
          "name": "Icon Comment ",
          "type": "command",
          "command": "extension.codeDesign"
        }
      ]
    },
    // whichkey-n(new)
    {
      "key": "n",
      "name": "New",
      "type": "bindings",
      "bindings": [
        {
          "key": "e",
          "name": "New file",
          "type": "command",
          "command": "fileutils.newFile"
        },
        {
          "key": "d",
          "name": "Directory",
          "type": "command",
          "command": "fileutils.newFolder"
        }
      ]
    },
    //whichkey-F
    {
      "key": "F",
      "command": "search.action.openEditor",
      "name": "New Search Editor",
      "type": "command"
    },
    //whichkey-f
    {
      "key": "f",
      "name": "File...",
      "type": "bindings",
      "bindings": [
        {
          "key": "f",
          "name": "Find File",
          "type": "command",
          "command": "workbench.action.quickOpen"
        },
        {
          "key": "r",
          "name": "Recent File",
          "type": "command",
          "command": "workbench.action.openRecent"
        },
        {
          "key": "s",
          "name": "Setting(json)",
          "type": "command",
          "command": "workbench.action.openSettingsJson"
        },
        {
          "key": "g",
          "name": "Search Text in sadebar",
          "type": "command",
          "command": "search.action.clearSearchResults"
        },
        {
          "key": "K",
          "name": "Open global key bindings",
          "type": "command",
          "command": "workbench.action.openGlobalKeybindings"
        },
        {
          "key": "k",
          "name": "Open global key bindings JSON",
          "type": "command",
          "command": "workbench.action.openGlobalKeybindingsFile"
        },
        {
          "key": "S",
          "name": "Save all files",
          "type": "command",
          "command": "workbench.action.files.saveAll"
        }
      ]
    },
    //whichkey-g
    {
      "key": "g",
      "name": "Git...",
      "type": "bindings",
      "bindings": [
        {
          "key": "/",
          "name": "Search Commits",
          "command": "gitlens.showCommitSearch",
          "type": "command",
          "when": "gitlens:enabled && config.gitlens.keymap == 'alternate'"
        },
        {
          "key": "a",
          "name": "Stage",
          "type": "command",
          "command": "git.stage"
        },
        {
          "key": "A",
          "name": "Stage All",
          "type": "command",
          "command": "git.stageAll"
        },
        {
          "key": "b",
          "name": "Checkout branch",
          "type": "command",
          "command": "git.checkout"
        },
        {
          "key": "d",
          "name": "git diff previous version(gitlens)",
          "type": "command",
          "command": "gitlens.diffWithPreviousInDiffLeft"
        },
        {
          "key": "g",
          "name": "git lens command palette",
          "type": "command",
          "command": "gitlens.gitCommands"
        },
        {
          "key": "h",
          "name": "Show history",
          "type": "command",
          "command": "gitlens.showQuickFileHistory"
        },
        {
          "key": "c",
          "name": "Commit",
          "type": "command",
          "command": "git.commit"
        },
        {
          "key": "C",
          "name": "Cherry Pick",
          "type": "command",
          "command": "gitlens.views.cherryPick"
        },
        {
          "key": "d",
          "name": "Diff",
          "type": "command",
          "command": "git.deleteBranch"
        },
        {
          "key": "f",
          "name": "Fetch",
          "type": "command",
          "command": "git.fetch"
        },
        {
          "key": "F",
          "name": "Pull From",
          "type": "command",
          "command": "git.pullFrom"
        },
        {
          "key": "h",
          "name": "Heatmap",
          "type": "command",
          "command": "gitlens.toggleFileHeatmap"
        },
        {
          "key": "H",
          "name": "History",
          "type": "command",
          "command": "git.viewFileHistory"
        },
        {
          "key": "i",
          "name": "Init",
          "type": "command",
          "command": "git.init"
        },
        {
          "key": "j",
          "name": "Next Change",
          "type": "command",
          "command": "workbench.action.editor.nextChange"
        },
        {
          "key": "k",
          "name": "Previous Change",
          "type": "command",
          "command": "workbench.action.editor.previousChange"
        },
        {
          "key": "o",
          "name": "Open Repository",
          "type": "command",
          "command": "git.openRepository"
        },
        {
          "key": "l",
          "name": "Toggle Line Blame",
          "type": "command",
          "command": "gitlens.toggleLineBlame",
          "when": "editorTextFocus && gitlens:canToggleCodeLens && gitlens:enabled && config.gitlens.keymap == 'alternate'"
        },
        {
          "key": "L",
          "name": "Toggle GitLens",
          "type": "command",
          "command": "gitlens.toggleCodeLens",
          "when": "editorTextFocus && gitlens:canToggleCodeLens && gitlens:enabled && config.gitlens.keymap == 'alternate'"
        },
        {
          "key": "m",
          "name": "Merge",
          "type": "command",
          "command": "git.merge"
        },
        {
          "key": "P",
          "name": "Push",
          "type": "command",
          "command": "git.push"
        },
        {
          "key": "p",
          "name": "Pull",
          "type": "command",
          "command": "git.pull"
        },
        {
          "key": "s",
          "name": "Status",
          "type": "command",
          "command": "gitlens.showQuickRepoStatus",
          "when": "gitlens:enabled && config.gitlens.keymap == 'alternate'"
        },
        {
          "key": "S",
          "name": "Stash",
          "type": "command",
          "command": "workbench.view.scm"
        },
        {
          "key": "t",
          "name": "Create Tag",
          "type": "command",
          "command": "git.createTag"
        },
        {
          "key": "T",
          "name": "Delete Tag",
          "type": "command",
          "command": "git.deleteTag"
        },
        {
          "key": "u",
          "name": "Unstage",
          "type": "command",
          "command": "git.unstage"
        }
      ]
    },
    //whichkey-i
    {
      "key": "i",
      "name": "Insert...",
      "type": "bindings",
      "bindings": [
        {
          "key": "s",
          "name": "Insert snippet",
          "type": "command",
          "command": "editor.action.insertSnippet"
        },
        {
          "key": "m",
          "name": "Insert image (Markdown)",
          "type": "command",
          "command": "extension.pasteImage",
          "when": "editorLangId == 'markdown'"
        }
      ]
    },
    //whichkey-j
    {
      "key": "j",
      "name": "+Jump/Join/Split",
      "type": "bindings",
      "bindings": [
        {
          "key": "=",
          "name": "Format region or buffer",
          "type": "command",
          "command": "editor.action.format"
        },
        {
          "key": "c",
          "name": "Jump to previous change",
          "type": "command",
          "command": "workbench.action.editor.previousChange"
        },
        {
          "key": "i",
          "name": "Jump to symbol in buffer",
          "type": "command",
          "command": "workbench.action.gotoSymbol"
        },
        {
          "key": "C",
          "name": "Jump to next change",
          "type": "command",
          "command": "workbench.action.editor.nextChange"
        }
      ]
    },
    //whichkey-l
    {
      "key": "l",
      "name": "LSP...",
      "type": "bindings",
      "bindings": [
        {
          "key": ";",
          "name": "Refactor",
          "type": "command",
          "command": "editor.action.refactor",
          "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
        },
        {
          "key": "a",
          "name": "Auto Fix",
          "type": "command",
          "command": "editor.action.autoFix",
          "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
        },
        {
          "key": "r",
          "name": "Rename",
          "type": "command",
          "command": "editor.action.rename",
          "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
        },
        {
          "key": "d",
          "name": "Definition",
          "type": "command",
          "command": "editor.action.revealDefinition",
          "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
        },
        {
          "key": "D",
          "name": "Declaration",
          "type": "command",
          "command": "editor.action.revealDeclaration"
        },
        {
          "key": "e",
          "name": "Errors",
          "type": "command",
          "command": "workbench.actions.view.problems"
        },
        {
          "key": "f",
          "name": "Format",
          "type": "command",
          "command": "editor.action.formatDocument",
          "when": "editorHasDocumentFormattingProvider && editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
        },
        {
          "key": "i",
          "name": "Implementation",
          "type": "command",
          "command": "editor.action.goToImplementation",
          "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
        },
        {
          "key": "l",
          "name": "Code Lens",
          "type": "command",
          "command": "codelens.showLensesInCurrentLine"
        },
        {
          "key": "j",
          "name": "Next Problem",
          "type": "command",
          "command": "editor.action.marker.next",
          "when": "editorFocus"
        },
        {
          "key": "J",
          "name": "Next Problem (Pro)",
          "type": "command",
          "command": "editor.action.marker.nextInFiles",
          "when": "editorFocus"
        },
        {
          "key": "o",
          "name": "Outline",
          "type": "command",
          "command": "outline.focus"
        },
        {
          "key": "k",
          "name": "Prev Problem",
          "type": "command",
          "command": "editor.action.marker.prevInFiles",
          "when": "editorFocus"
        },
        {
          "key": "K",
          "name": "Prev Problem (Pro)",
          "type": "command",
          "command": "editor.action.marker.prev",
          "when": "editorFocus"
        },
        {
          "key": "q",
          "name": "Quick Fix",
          "type": "command",
          "command": "editor.action.quickFix",
          "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
        },
        {
          "key": "r",
          "name": "References",
          "type": "command",
          "command": "editor.action.goToReferences",
          "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
        },
        {
          "key": "R",
          "name": "Rename",
          "type": "command",
          "command": "editor.action.rename",
          "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
        },
        {
          "key": "v",
          "name": "View All References",
          "type": "command",
          "command": "references-view.find",
          "when": "editorHasReferenceProvider"
        },
        {
          "key": "s",
          "name": "Go To Symbol",
          "type": "command",
          "command": "workbench.action.gotoSymbol"
        },
        {
          "key": "S",
          "name": "Show All Symbols",
          "type": "command",
          "command": "workbench.action.showAllSymbols"
        }
      ]
    },
    //whichkey-m
    {
      "key": "m",
      "name": "Mark...",
      "type": "bindings",
      "bindings": [
        {
          "key": "c",
          "name": "Clear Bookmarks",
          "type": "command",
          "command": "bookmarks.clear"
        },
        {
          "key": "C",
          "name": "Clear All Bookmarks",
          "type": "command",
          "command": "bookmarks.clearFromAllFiles"
        },
        {
          "key": "j",
          "name": "Next Bookmark",
          "type": "command",
          "command": "bookmarks.jumpToNext",
          "when": "editorTextFocus"
        },
        {
          "key": "k",
          "name": "Previous Bookmark",
          "type": "command",
          "command": "bookmarks.jumpToPrevious",
          "when": "editorTextFocus"
        },
        {
          "key": "l",
          "name": "List Bookmarks",
          "type": "command",
          "command": "bookmarks.listFromAllFiles",
          "when": "editorTextFocus"
        },
        {
          "key": "r",
          "name": "Refresh Bookmarks",
          "type": "command",
          "command": "bookmarks.refresh"
        },
        {
          "key": "t",
          "name": "Toggle Bookmark",
          "type": "command",
          "command": "bookmarks.toggle",
          "when": "editorTextFocus"
        },
        {
          "key": "s",
          "name": "Show Bookmarks",
          "type": "command",
          "command": "workbench.view.extension.bookmarks"
        },
        {
          "key": "p",
          "name": "Markdown Preview",
          "type": "command",
          "command": "markdown-preview-enhanced.openPreviewToTheSide",
          "when": "editorLangId == 'markdown'"
        },
        {
          "key": "a",
          "name": "Add/Update section numbers",
          "command": "markdown.extension.toc.addSecNumbers",
          "when": "editorLangId == 'markdown'"
        },
        {
          "key": "d",
          "name": "Delete section numbers",
          "command": "markdown.extension.toc.removeSecNumbers",
          "when": "editorLangId == 'markdown'"
        },
        {
          "key": "b",
          "name": "Create toc",
          "command": "markdown.extension.toc.create",
          "when": "editorLangId == 'markdown'"
        }
      ]
    },
    //whichkey-M
    {
      "key": "M",
      "name": "Minimap",
      "type": "command",
      "command": "editor.action.toggleMinimap"
    },
    //whichkey-o
    {
      "key": "o",
      "name": "Outline Float Window",
      "type": "command",
      "command": "breadcrumbs.focusAndSelect"
    },
    //whichkey-O
    {
      "key": "O",
      "name": "OutlineToggle",
      "type": "command",
      "command": "workbench.action.toggleAuxiliaryBar"
    },
    //whichkey-P
    {
      "key": "P",
      "name": "Peek...",
      "type": "bindings",
      "bindings": [
        {
          "key": "d",
          "name": "Definition",
          "type": "command",
          "command": "editor.action.peekDefinition",
          "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
        },
        {
          "key": "D",
          "name": "Declaration",
          "type": "command",
          "command": "editor.action.peekDeclaration"
        },
        {
          "key": "i",
          "name": "Implementation",
          "type": "command",
          "command": "editor.action.peekImplementation",
          "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
        },
        {
          "key": "p",
          "name": "Toggle Focus",
          "type": "command",
          "command": "togglePeekWidgetFocus",
          "when": "inReferenceSearchEditor || referenceSearchVisible"
        },
        {
          "key": "r",
          "name": "References",
          "type": "command",
          "command": "editor.action.referenceSearch.trigger"
        },
        {
          "key": "t",
          "name": "Type Definition",
          "type": "command",
          "command": "editor.action.peekTypeDefinition"
        }
      ]
    },
    //whichkey-s
    {
      "key": "s",
      "name": "Search...",
      "type": "bindings",
      "bindings": [
        {
          "key": "/",
          "name": "Search Text(/)",
          "type": "command",
          "command": "vim.remap",
          "args": {
            "after": ["leader", "leader", "/"]
          }
        },
        {
          "key": "c",
          "name": "Select Colorscheme",
          "type": "command",
          "command": "workbench.action.selectTheme"
        },
        {
          "key": "j",
          "name": "show jumplist",
          "type": "command",
          "command": "vim.remap",
          "args": {
            "commands": [
              {
                "command": ":jumps"
              }
            ]
          }
        }
      ]
    },
    //whichkey-S
    {
      "key": "S",
      "name": "Show...",
      "type": "bindings",
      "bindings": [
        {
          "key": "e",
          "name": "Show explorer",
          "type": "command",
          "command": "workbench.view.explorer"
        },
        {
          "key": "s",
          "name": "Show search",
          "type": "command",
          "command": "workbench.view.search"
        },
        {
          "key": "g",
          "name": "Show source control",
          "type": "command",
          "command": "workbench.view.scm"
        },
        {
          "key": "t",
          "name": "Show test",
          "type": "command",
          "command": "workbench.view.extension.test"
        },
        {
          "key": "r",
          "name": "Show remote explorer",
          "type": "command",
          "command": "workbench.view.remote"
        },
        {
          "key": "x",
          "name": "Show extensions",
          "type": "command",
          "command": "workbench.view.extensions"
        },
        {
          "key": "p",
          "name": "Show problem",
          "type": "command",
          "command": "workbench.actions.view.problems"
        },
        {
          "key": "o",
          "name": "Show output",
          "type": "command",
          "command": "workbench.action.output.toggleOutput"
        },
        {
          "key": "d",
          "name": "Show debug console",
          "type": "command",
          "command": "workbench.debug.action.toggleRepl"
        }
      ]
    },
    //whichkey-t
    {
      "key": "t",
      "name": "Terminal...",
      "type": "bindings",
      "bindings": [
        {
          "key": "t",
          "name": "Toggle Terminal",
          "type": "command",
          "command": "workbench.action.togglePanel"
        },
        {
          "key": "T",
          "name": "Focus Terminal",
          "type": "command",
          "command": "workbench.action.terminal.toggleTerminal",
          "when": "!terminalFocus"
        }
      ]
    },
    //whichkey-u
    {
      "key": "u",
      "name": "UI toggles...",
      "type": "bindings",
      "bindings": [
        {
          "key": "a",
          "name": "Toggle tool/activity bar visibility",
          "type": "command",
          "command": "workbench.action.toggleActivityBarVisibility"
        },
        {
          "key": "b",
          "name": "Toggle side bar visibility",
          "type": "command",
          "command": "workbench.action.toggleSidebarVisibility"
        },
        {
          "key": "p",
          "name": "Toggle side bar visibility",
          "type": "command",
          "command": "workbench.view.extension.project-manager"
        },
        {
          "key": "g",
          "name": "Toggle side bar with git",
          "type": "command",
          "command": "workbench.view.scm"
        },
        {
          "key": "j",
          "name": "Toggle panel visibility",
          "type": "command",
          "command": "workbench.action.togglePanel"
        },
        {
          "key": "F",
          "name": "Toggle full screen",
          "type": "command",
          "command": "workbench.action.toggleFullScreen"
        },
        {
          "key": "s",
          "name": "Select theme",
          "type": "command",
          "command": "workbench.action.selectTheme"
        },
        {
          "key": "m",
          "name": "Toggle maximized panel",
          "type": "command",
          "command": "workbench.action.toggleMaximizedPanel"
        },
        {
          "key": "T",
          "name": "Toggle tab visibility",
          "type": "command",
          "command": "workbench.action.toggleTabsVisibility"
        }
      ]
    },
    //whichkey-w
    {
      "key": "w",
      "name": "Window...",
      "type": "bindings",
      "bindings": [
        {
          "key": "W",
          "name": "Focus previous editor group",
          "type": "command",
          "command": "workbench.action.focusPreviousGroup"
        },
        {
          "key": "w",
          "name": "Focus next editor group",
          "type": "command",
          "command": "workbench.action.focusNextGroup"
        },
        {
          "key": "H",
          "name": "Move editor group left",
          "type": "command",
          "command": "workbench.action.moveActiveEditorGroupLeft"
        },
        {
          "key": "J",
          "name": "Move editor group down",
          "type": "command",
          "command": "workbench.action.moveActiveEditorGroupDown"
        },
        {
          "key": "K",
          "name": "Move editor group up",
          "type": "command",
          "command": "workbench.action.moveActiveEditorGroupUp"
        },
        {
          "key": "L",
          "name": "Move editor group right",
          "type": "command",
          "command": "workbench.action.moveActiveEditorGroupRight"
        },
        {
          "key": "t",
          "name": "Toggle editor group sizes",
          "type": "command",
          "command": "workbench.action.toggleEditorWidths"
        },
        {
          "key": "m",
          "name": "Toggle Maximize windows",
          "type": "command",
          "command": "workbench.action.toggleEditorWidths"
        },
        {
          "key": "M",
          "name": "Maximize editor group and hide side bar",
          "type": "command",
          "command": "workbench.action.maximizeEditor"
        },
        {
          "key": "=",
          "name": "Reset editor group sizes",
          "type": "command",
          "command": "workbench.action.evenEditorWidths"
        },
        {
          "key": "z",
          "name": "Combine all editors",
          "type": "command",
          "command": "workbench.action.joinAllGroups"
        },
        {
          "key": "d",
          "name": "Close editor group",
          "type": "command",
          "command": "workbench.action.closeEditorsInGroup"
        },
        {
          "key": "x",
          "name": "Close all editor groups",
          "type": "command",
          "command": "workbench.action.closeAllGroups"
        },
        {
          "key": "s",
          "name": "Split Horizontal",
          "type": "command",
          "command": "workbench.action.splitEditorDown"
        },
        {
          "key": "v",
          "name": "Split Vertical",
          "type": "command",
          "command": "workbench.action.splitEditor"
        }
      ]
    },
    //whichkey-x
    {
      "key": "x",
      "name": "Extensions",
      "type": "command",
      "command": "workbench.view.extensions"
    },
    // whichkey-y
    {
      "key": "y",
      "name": "Copy(clipboard)",
      "type": "command",
      "command": "vim.remap",
      "args": {
        "after": ["\"", "+", "y"]
      }
    },
    // whichkey-Y
    {
      "key": "Y",
      "name": "Copy(clipboard)",
      "type": "command",
      "command": "vim.remap",
      "args": {
        "after": ["\"", "+", "Y"]
      }
    },
    //whichkey-p
    {
      "key": "p",
      "name": "Paste(clipboard)",
      "type": "command",
      "command": "vim.remap",
      "args": {
        "after": ["\"", "+", "p"]
      }
    },
    //whichkey-z
    {
      "key": "z",
      "name": "Toggle zen mode",
      "type": "command",
      "command": "workbench.action.toggleZenMode"
    }
  ],
  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━❰ end whichkey ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/

  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━❰ language config ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.quickSuggestions": {
      "comments": "on",
      "strings": "on",
      "other": "on"
    }
  },
  "[markdown]": {
    "editor.wordWrap": "on",
    "editor.quickSuggestions": {
      "comments": "on",
      "strings": "on",
      "other": "on"
    },
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[vue]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
    // "editor.defaultFormatter": "octref.vetur"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[ahk]": {
    "editor.formatOnSave": false
  },
  "html.autoClosingTags": false,
  "javascript.inlayHints.functionLikeReturnTypes.enabled": false,
  "typescript.inlayHints.functionLikeReturnTypes.enabled": false,
  // "prettier.configPath": "C:\\Users\\9\\.prettierrc"
  // "rainbowTags.hightlightType": "background-color"
  /*--━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--
    --━━━━━━━━━━━━━━━━━━━❰ end language ❱━━━━━━━━━━━━━━━━━━━--
  --━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━--*/

  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━❰ unkown configs ❱━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  "python.defaultInterpreterPath": "C:\\Users\\9\\scoop\\shims\\python3.exe",
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━❰ end configs ❱━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,

  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //─────────────────────────────────────────────────
  //   Plugin:    vscode-spell-checker",
  //   Github:    https://github.com/streetsidesoftware/vscode-spell-checker",
  //─────────────────────────────────────────────────,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━❰ configs ❱━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //-------- Code Spell Checker Configuration --------
  // The Language local to use when spell checking. "en", "en-US" and "en-GB" are currently supported by default.
  "cSpell.language": "en",
  // Controls the maximum number of spelling errors per document.
  "cSpell.maxNumberOfProblems": 100,
  // Controls the number of suggestions shown.
  "cSpell.numSuggestions": 8,
  // The minimum length of a word before checking it against a dictionary.
  "cSpell.minWordLength": 4,
  // Specify file types to spell check.
  "cSpell.enabledLanguageIds": [
    "csharp",
    "go",
    "javascript",
    "javascriptreact",
    "markdown",
    "php",
    "plaintext",
    "typescript",
    "typescriptreact",
    "yml"
  ],
  // Enable / Disable the spell checker.
  "cSpell.enabled": true,
  // Display the spell checker status on the status bar.
  "cSpell.showStatus": true,
  // Enable / Disable compound words like 'errormessage'
  "cSpell.allowCompoundWords": false,
  // Words to be ignored and not suggested.
  "cSpell.ignoreWords": ["behaviour"],
  // User words to add to dictionary.  Should only be in the user settings.
  "cSpell.userWords": [
    "ampm",
    "autohotkey",
    "bmat",
    "bmatrix",
    "dataview",
    "dotfile",
    "gitmoji",
    "hsnips",
    "impliedby",
    "infty",
    "leetcode",
    "Leiyi",
    "mathbb",
    "nvim",
    "pmat",
    "pmatrix",
    "tada",
    "unstage",
    "Unstaged",
    "vimrc",
    "vmat",
    "vmatrix",
    "vscodevim"
  ],
  // Specify paths/files to ignore.
  "cSpell.ignorePaths": [
    "node_modules", // this will ignore anything the node_modules directory
    "**/node_modules", // the same for this one
    "**/node_modules/**", // the same for this one
    "node_modules/**", // Doesn't currently work due to how the current working directory is determined.
    "vscode-extension", //
    ".git", // Ignore the .git directory
    "*.dll", // Ignore all .dll files.
    "**/*.dll" // Ignore all .dll files
  ],
  // flagWords - list of words to be always considered incorrect
  // This is useful for offensive words and common spelling errors.
  // For example "hte" should be "the"`
  "cSpell.flagWords": ["hte"],
  // Set the delay before spell checking the document. Default is 50.
  "cSpell.spellCheckDelayMs": 50,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━❰ end configs ❱━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  "files.eol": "\n",
  "problems.showCurrentInStatus": false,
  "editor.unicodeHighlight.allowedLocales": {
    "zh-hant": true
  },
  "workbench.startupEditor": "none",
  "prettier.jsxSingleQuote": true,
  "prettier.singleQuote": true,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //─────────────────────────────────────────────────
  //   Plugin:    vscode-error-lens",
  //   Github:    https://github.com/usernamehw/vscode-error-lens",
  //─────────────────────────────────────────────────,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━❰ configs ❱━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  "errorLens.statusBarIconsEnabled": false,
  "errorLens.gutterIconsEnabled": true,
  "errorLens.gutterIconSet": "defaultOutline",
  "errorLens.fontStyleItalic": true,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━❰ end configs ❱━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,

  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //─────────────────────────────────────────────────
  //   Plugin:    koro1FileHeader",
  //   Github:    https://github.com/OBkoro1/koro1FileHeader",
  //─────────────────────────────────────────────────,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,

  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━❰ configs ❱━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  "fileheader.customMade": {
    // 头部注释默认字段
    "Author": "Leiyi548",
    "Date": "Do not edit", // 设置后默认设置文件生成时间
    "LastEditTime": "Leiyi548", // 设置后，保存文件更改默认更新最后编辑时间
    "LastEditors": "Leiyi548", // 设置后，保存文件更改默认更新最后编辑人
    "Description": "",
    "FilePath": "Do not edit", // 设置后，默认生成文件相对于项目的路径
    "custom_string_obkoro1": "任何一个傻瓜都会写能够让机器理解的代码，只有好的程序员才能写出人类可以理解的代码。——Martin Fowler",
    "custom_string_obkoro2": "如在使用中遇到问题,可以联系我,QQ: 1424630446交流"
  },
  // 函数注释
  "fileheader.cursorMode": {
    // 默认字段
    "description": "",
    "param": "",
    "return": ""
  },
  // 插件配置项
  "fileheader.configObj": {
    "autoAdd": true, // 检测文件没有头部注释，自动添加文件头部注释
    "autoAddLine": 100, // 文件超过多少行数 不再自动添加头部注释
    "autoAlready": true, // 只添加插件支持的语言以及用户通过`language`选项自定义的注释
    "supportAutoLanguage": ["ts", "py", "css"], // 设置之后，在数组内的文件才支持自动添加
    // 自动添加头部注释黑名单
    "prohibitAutoAdd": ["json"],
    "prohibitItemAutoAdd": [
      "项目的全称禁止项目自动添加头部注释, 使用快捷键自行添加"
    ],
    "folderBlacklist": ["node_modules"], // 文件夹或文件名禁止自动添加头部注释
    "wideSame": false, // 头部注释等宽设置
    "wideNum": 13, // 头部注释字段长度 默认为13
    "functionWideNum": 0, // 函数注释等宽设置 设为0 即为关闭
    // 头部注释第几行插入
    "headInsertLine": {
      "php": 2, // php文件 插入到第二行
      "css": 2
    },
    "beforeAnnotation": {}, // 头部注释之前插入内容
    "afterAnnotation": {}, // 头部注释之后插入内容
    "specialOptions": {}, // 特殊字段自定义
    "switch": {
      "newlineAddAnnotation": true // 默认遇到换行符(\r\n \n \r)添加注释符号
    },
    "moveCursor": true, // 自动移动光标到Description所在行
    "dateFormat": "YYYY-MM-DD HH:mm:ss",
    "atSymbol": ["@", "@"], // 更改所有文件的自定义注释中的@符号
    "atSymbolObj": {}, //  更改单独语言/文件的@
    "colon": [": ", ": "], // 更改所有文件的注释冒号
    "colonObj": {}, //  更改单独语言/文件的冒号
    "filePathColon": "路径分隔符替换", // 默认值： mac: / window是: \
    "showErrorMessage": false, // 是否显示插件错误通知 用于debugger
    "writeLog": false, // 错误日志生成
    "CheckFileChange": false, // 单个文件保存时进行diff检查
    "createHeader": true, // 新建文件自动添加头部注释
    "useWorker": false, // 是否使用工作区设置
    "designAddHead": false, // 添加注释图案时添加头部注释
    "headDesignName": "random", // 图案注释使用哪个图案
    "headDesign": false, // 是否使用图案注释替换头部注释
    "cursorModeInternal": false, // 是否在函数内生成函数注释
    "openFunctionParamsCheck": true, // 开启关闭自动提取添加函数参数
    "functionParamsShape": "normal", // 函数参数外形自定义 "normal" | "no bracket" | "no type"
    // 自定义语言注释符号，覆盖插件的注释格式
    "language": {
      // js后缀文件
      "js": {
        "head": "/$$",
        "middle": " $ @",
        "end": " $/",
        // 函数自定义注释符号：如果有此配置 会默认使用
        "functionSymbol": {
          "head": "/******* ", // 统一增加几个*号
          "middle": " * @",
          "end": " */"
        }
      },
      // 一次匹配多种文件后缀文件 不用重复设置
      "h/hpp/cpp": {
        "head": "/*** ", // 统一增加几个*号
        "middle": " * @",
        "end": " */"
      },
      // 针对有特殊要求的文件如：test.blade.php
      "blade.php": {
        "head": "<!--",
        "middle": " * @",
        "end": "-->"
      }
    },
    // 默认注释  没有匹配到注释符号的时候使用。
    "annotationStr": {
      "head": "/*",
      "middle": " * @",
      "end": " */",
      "use": false
    }
  },
  "editor.minimap.enabled": false,
  "explorer.compactFolders": false,
  "window.experimental.commandCenter": true,
  "window.experimental.windowControlsOverlay.enabled": true,
  "workbench.activityBar.visible": false,
  "markdown.extension.toc.levels": "2..6",
  "markdown.extension.toc.orderedList": true,
  "workbench.colorTheme": "One Dark Pro"
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━❰ end configs ❱━━━━━━━━━━━━━━━━━,
  //━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━,
}
